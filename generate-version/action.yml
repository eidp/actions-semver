name: 'Generate Version'
description: >
  The generate-version action executes the [`run_semver.py`](../github_semver/run_semver.py) script.
  The generated version is then stored as `SEMVER_VERSION` environment variable, set as output of this action and finally stored as an artifact.

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.13'
  build-rc-semver:
    description: 'Whether to build RC semver (adds rc suffix)'
    required: false
    default: 'true'
outputs:
  version:
    description: 'Generated semantic version'
    value: ${{ steps.generate.outputs.version }}
runs:
  using: 'composite'
  steps:
  - name: Set up Python
    uses: actions/setup-python@v5.6.0
    with:
      python-version: ${{ inputs.python-version }}

  - name: Install UV
    uses: astral-sh/setup-uv@v4
    with:
      enable-cache: true

  - name: Install dependencies
    shell: bash
    working-directory: ${{ github.action_path }}/..
    run: |
      uv sync --frozen

  - name: Determine commit SHA and branch
    id: metadata
    shell: bash
    run: |
      if [[ -n "${{ github.head_ref }}" ]]; then
        # This is a pull request - use head SHA and head ref
        COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Using PR head SHA: $COMMIT_SHA"
        echo "Using PR head ref: $BRANCH_NAME"
      else
        # Regular push - use GITHUB_SHA and ref name
        COMMIT_SHA="${GITHUB_SHA}"
        BRANCH_NAME="${{ github.ref_name }}"
        echo "Using GITHUB_SHA: $COMMIT_SHA"
        echo "Using ref name: $BRANCH_NAME"
      fi
      echo "sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
      echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

  - name: Generate version
    id: generate
    shell: bash
    working-directory: ${{ github.action_path }}/..
    env:
      BUILD_RC_SEMVER: ${{ inputs.build-rc-semver }}
      REPO_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
    run: |
      CHART_VERSION=$(uv run python -m github_semver.run_semver)
      echo "$CHART_VERSION" > version
      echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT
      echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

  - name: Upload version artifact
    uses: actions/upload-artifact@v4
    with:
      name: version
      path: version

  - name: 📋 Add to Job Summary
    shell: bash
    run: |
      # Determine version type based on branch and RC mode
      if [[ "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
        # Default branch - check RC mode to determine release type
        if [[ "${{ inputs.build-rc-semver }}" == "true" ]]; then
          VERSION_TYPE="🎯 **Release Candidate Build**"
          VERSION_DESC="Pre-release version"
        else
          VERSION_TYPE="🚀 **Release Build**"
          VERSION_DESC="Production-ready semantic version"
        fi
      else
        # Feature branch - always feature build regardless of RC mode
        VERSION_TYPE="**Feature Build**"
        VERSION_DESC="Development version with build metadata"
      fi

      # Get short SHA for display
      COMMIT_SHA="${{ steps.metadata.outputs.sha }}"
      SHORT_SHA="${COMMIT_SHA:0:8}"

      echo "## 🏗️ Version Generation Summary" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
      echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
      echo "| 📦 **Generated Version** | \`${{ env.CHART_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
      echo "| 🔨 **Version Type** | $VERSION_TYPE |" >> $GITHUB_STEP_SUMMARY
      echo "| 🌿 **Branch** | \`${{ steps.metadata.outputs.branch }}\` |" >> $GITHUB_STEP_SUMMARY
      echo "| 📍 **Commit** | \`$SHORT_SHA\` |" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "> 🎉 **$VERSION_DESC** generated successfully!" >> $GITHUB_STEP_SUMMARY
